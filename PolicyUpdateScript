#!/bin/bash

#########################
#
# Copyright (c) 2018, JAMF Software, LLC.  All rights reserved.
#
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are met:
#               * Redistributions of source code must retain the above copyright
#                 notice, this list of conditions and the following disclaimer.
#               * Redistributions in binary form must reproduce the above copyright
#                 notice, this list of conditions and the following disclaimer in the
#                 documentation and/or other materials provided with the distribution.
#               * Neither the name of the JAMF Software, LLC nor the
#                 names of its contributors may be used to endorse or promote products
#                 derived from this software without specific prior written permission.
#
#       THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
#       EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#       WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#       DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
#       DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#       (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#       LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#       ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###########################
#
# Description
#
# Script to use Classic API to update the active and expiration date on selected polices.
# 
#	
#
########################### 
# HISTORY
#
#	-Created by Erin McDonald 28, June, 2018
#	
###########################
# Variables
JPuser="" #Classic API User
JPPass="" #Password for Classic API user
JPUrl="" #Jamf Pro URL including https and port, no trailing slash
# # Do not edit below this line
###########################
activedate=""
expiredate=""
policyid=""
log_location="/var/log/policydate.log"
#############
# Functions
#############

# Script logging
ScriptLogging(){

	DATE=`date +%Y-%m-%d\ %H:%M:%S`
	LOG="$log_location"
	
	/bin/echo "$DATE" " $1" >> $LOG
}


# Get policy type - Canary or Tableau
getType() {

policytype=$(/usr/bin/osascript <<AppleScript
set myType to {"Type1", "Type2"} 
set theType to choose from list myType with prompt "Select the Policy Type to update."
AppleScript
)

ScriptLogging " ** User selected $policytype Group to update ** "

}

# Get the Canary policy to be upated

get1Policy() {

policypick=$(/usr/bin/osascript <<AppleScript

set myPolicy1 to {"POLICYID1: Policy Display Name", "POLICYID2: Policy Display Name", "POLICYID3: Policy Display Name"}

set selectedPolicy1 to {choose from list myPolicy1}

AppleScript
)

ScriptLogging " ** User selected $policypick to update ** "
}

# Get the Tableau policy to be upated

get2Policy() {

policypick=$(/usr/bin/osascript <<AppleScript

set myPolicy2 to {"POLICYID1: Policy Display Name", "POLICYID2: Policy Display Name", "POLICYID3: Policy Display Name"}

set selectedPolicy2 to {choose from list myPolicy2}

AppleScript

)
ScriptLogging " ** User selected $policypick to update ** "
}	

# Get the activation date and verify it

getActiveDate() {
activedate=$(/usr/bin/osascript<<END
tell application "System Events"
activate
set the answer to text returned of (display dialog "Please enter a date to activate the policy in format yyyy-mm-dd hh:mm:ss, military time" default answer "YYYY-MM-DD HH:MM:SS" buttons {"Continue"})
end tell
END)

	activecheck=$(/bin/echo $activedate | /usr/bin/awk  -F '-|:| ' '{ print ($3 <= 31 && $2 <= 12 && match($1, /^[1-9][0-9][0-9][0-9]$/) && $4 <=24 && $5 <=59 && $6 <= 59) ? "good" : "bad" }') 

until [ $activecheck == "good" ] || [ $activecheck == '' ]; do
	activedate=$(/usr/bin/osascript<<END
	tell application "System Events"
	activate
	set the answer to text returned of (display dialog "Incorrect format. Please enter a date to activate the policy in format yyyy-mm-dd hh:mm:ss, military time" default answer "YYYY-MM-DD HH:MM:SS" buttons {"Continue","Cancel"})
	end tell
END)
	if [ $activedate == ""]; then
		/bin/echo "User cancelled"
				ScriptLogging " ** User quit app ** "
		activecheck=""
		exit 0
		else
	activecheck=$(/bin/echo $activedate | /usr/bin/awk  -F '-|:| ' '{ print ($3 <= 31 && $2 <= 12 && match($1, /^[1-9][0-9][0-9][0-9]$/) && $4 <=24 && $5 <=59 && $6 <= 59) ? "good" : "bad" }') 
	/bin/echo $activecheck
	fi
done

ScriptLogging " ** User entered $activedate as the activation date ** "

}	

# Get the expiration date and verify it

getExpireDate() {
expiredate=$(/usr/bin/osascript<<END
tell application "System Events"
activate
set the answer to text returned of (display dialog "Please enter a date to expire the policy in format yyyy-mm-dd hh:mm:ss, military time" default answer "YYYY-MM-DD HH:MM:SS" buttons {"Continue"})
end tell
END)
expirecheck=$(/bin/echo $expiredate | /urs/bin/awk  -F '-|:| ' '{ print ($3 <= 31 && $2 <= 12 && match($1, /^[1-9][0-9][0-9][0-9]$/) && $4 <=24 && $5 <=59 && $6 <= 59) ? "good" : "bad" }') 
until [ $expirecheck == "good" ] || [ $expirecheck == '' ]; do
	expiredate=$(osascript<<END
	tell application "System Events"
	activate
	set the answer to text returned of (display dialog "Incorrect format. Please enter a date to expire the policy in format yyyy-mm-dd hh:mm:ss, military time" default answer "YYYY-MM-DD HH:MM:SS" buttons {"Continue","Cancel"})
	end tell
END)
	expirecheck=$(/bin/echo $expiredate | /usr/bin/awk  -F '-|:| ' '{ print ($3 <= 31 && $2 <= 12 && match($1, /^[1-9][0-9][0-9][0-9]$/) && $4 <=24 && $5 <=59 && $6 <= 59) ? "good" : "bad" }')
done	

ScriptLogging " ** User entered $expiredate as the expiration date ** "

}

# PUT activtaion and expiration date to Jamf Pro, then verify PUT

doPut() {
/usr/bin/curl -v -u $JPuser:$JPPass -H "Content-Type: text/xml" $JPUrl/JSSResource/policies/id/$policyid -X PUT -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><policy><general><date_time_limitations><activation_date>$activedate</activation_date><expiration_date>$expiredate</expiration_date></date_time_limitations></general></policy>" >> /var/log/policydate.log 2>&1

xml=$(/usr/bin/curl -v -u $JPuser:$JPPass -H "Accept: application/xml" $JPUrl/JSSResource/policies/id/$policyid -X GET)

activevalue=$(/bin/echo $xml | xpath "//policy/general/date_time_limitations/activation_date" | /usr/bin/awk -F'<activation_date>|</activation_date>' '{print $2}')

expirevalue=$(/bin/echo $xml | xpath "//policy/general/date_time_limitations/expiration_date" | /usr/bin/awk -F'<expiration_date>|</expiration_date>' '{print $2}')

if [[ $activevalue != $activedate ]] && [[ $expirevalue != $expiredate ]]; then
	errorAlert=$("/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper" -windowType utility -title "Error" -heading "Error" -description "An error has occurred.  Check the log located at /var/log/policydate.log for the HTML status." -button1 "OK" -defaultButton 1)
	ScriptLogging " ** Error occurred above ** "
	else
		ScriptLogging " ** Policy $policypick Updated ** "
		fi
}
#############################################
# Run Process

runProcess() {
	getType

	if [ $policytype = "false" ]; then
		/bin/echo "User quit app"
		ScriptLogging " ** User quit app ** "
		elif
			[ $policytype == "Policy1" ]; then
				getPolicy1
				if [ $policypick == "false" ]; then
					/bin/echo echo "User Quit App"
							ScriptLogging " ** User quit app ** "
					exit 0
					else
					policyid=`/bin/echo "${policypick}" | awk -F: 'FNR == 1 {print $1}'`
					getActiveDate
					getExpireDate
					doPut
					fi
		else 
		 		getPolicy2
			if [ $policypick == "false" ]; then
				/bin/echo "User Quit App"
						ScriptLogging " ** User quit app ** "
				exit 0
				else
				policyid=`/bin/echo "${policypick}" | /usr/bin/awk -F: 'FNR == 1 {print $1}'`
				getActiveDate
				getExpireDate
				doPut
				fi
	fi
	
}

#Prompt for retry

promptRetry(){
	runAgainYN="$(/usr/bin/osascript -e 'tell app "System Events" to display dialog "Would you like to change the dates on other policies?" buttons {"Not Now","Yes"} default button "Yes"' | /usr/bin/grep -c "Yes")"
	until [ $runAgainYN == "0" ]; do
				ScriptLogging " ** User selected to update another policy ** "
		runProcess
		runAgainYN="$(/usr/bin/osascript -e 'tell app "System Events" to display dialog "Would you like to change the dates on other policies?" buttons {"Not Now","Yes"} default button "Yes"' | /usr/bin/grep -c "Yes")"
	done
			ScriptLogging " ** User quit app ** "
}

##################
# Core Script
##################

#Run Initial process
runProcess
#Prompt for re-run or exit
promptRetry
